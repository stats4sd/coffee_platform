<?php

namespace App\Console\Commands;

use Gettext\Generators\Po;
use Gettext\Translation;
use Illuminate\Console\Command;
use Gettext\Translations;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Str;
use Symfony\Component\Process\Process;

class UpdateVueTranslations extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'vue:translate';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Searches all vue components for translations (using $__("") syntax); compares against the existing gettext generated by translations.io and adds missing strings ready for translation';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        //import from a .po file:
        //$translations = Translations::fromPoFile(resource_path('lang/gettext/es/app.po'));


        // find all $__('') translations from vue files:
        $vueText = file_get_contents(resource_path('js/components/IndicatorHub.vue'));

        $strings = Str::of($vueText)->matchAll('/\$\_\_\([\'\"](.+)[\'\"]\)/');

        // Clear and rebuild the VueTranslationPlaceholder file
        // This ensures the file is in-sync with the translation strings in the vue components - if something is removed in a vue file, it is removed from the php placeholder too.
        file_put_contents(resource_path('lang/VueTranslationPlaceholder.php'), '<?php ');

        foreach($strings as $string) {

            file_put_contents(
                resource_path('lang/VueTranslationPlaceholder.php'),
                "t('${string}');\n",
                FILE_APPEND
            );

        }

//        // export back to po file
//        $saveFile = Po::toFile($translations, resource_path('lang/gettext/es/app.po'));
//
//        if(!$saveFile) {
//            $this->error('could not save po file!');
//        }

        // run the translation sync - this searches through php files and pulls found gettext (t('')) strings into the po file
        Artisan::call('translation:sync');

        // convert Po file to json for reading by Vue app:
        $compileProcess = new Process(["node_modules/.bin/gettext-compile", "--output", "resources/js/translations.json", "resources/lang/gettext/es/app.po"]);

        $compileProcess->mustRun();

        if($compileProcess->isSuccessful()) {
            $this->info('gettext-compile succeeded!');
        }
        else {
            $this->info('gettext-compile failed with output' . $compileProcess->getErrorOutput());
        }
    }
}
